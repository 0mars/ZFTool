<?php

namespace ZFTool\Controller;

use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;
use Zend\View\Model\ConsoleModel;
use ZFTool\Model\Skeleton;
use Zend\Console\ColorInterface as Color;

class CreateController extends AbstractActionController
{
    
    public function projectAction()
    {        
        if (!extension_loaded('zip')) {
            return $this->sendError('You need to install the ZIP extension of PHP');
        }
        $console = $this->getServiceLocator()->get('console');
        $tmpDir  = sys_get_temp_dir();
        $request = $this->getRequest();
        $path    = $request->getParam('path');
        
        if (file_exists($path)) {
            return $this->sendError (
                "The directory $path already exists. You cannot create a ZF2 project here."
            );
        }

        $commit = Skeleton::getLastCommit();
        if (false === $commit) { // error on github connection
            $tmpFile = Skeleton::getLastZip($tmpDir);
            if (empty($tmpFile)) {
                return $this->sendError('I cannot access the API of github.');
            }
            $console->writeLine(
                "Warning: I cannot connect to github, I will use the last download of ZF2 Skeleton.",
                 Color::GRAY
            );
        } else {
            $tmpFile = Skeleton::getTmpFileName($tmpDir, $commit);
        }
        
        if (!file_exists($tmpFile)) {
            if (!Skeleton::getSkeletonApp($tmpFile)) {
                return $this->sendError('I cannot access the ZF2 skeleton application in github.');
            }
        }
       
        $zip = new \ZipArchive;
        if ($zip->open($tmpFile)) { 
            if (!$zip->extractTo($tmpDir)) {
                return $this->sendError(
                    "Error during the unzip of $tmpFile. Consider to delete it and try again."
                );
            }
            rename ($tmpDir . '/' . Skeleton::SKELETON_DIR, $path);
            $zip->close();
        }
        $console->writeLine("ZF2 skeleton application installed in $path.", Color::GREEN);
    }
    
    public function moduleAction()
    {
        $console = $this->getServiceLocator()->get('console');
        $tmpDir  = sys_get_temp_dir();
        $request = $this->getRequest();
        $name    = $request->getParam('name');
        $path    = $request->getParam('path');
        
        if (empty($path)) {
            $path = '.';
        }
        
        if (file_exists($path . '/module/' . $name)) {
            return $this->sendError(
                "The module $name already exists."
            );
        }
        $name = ucfirst($name);
        mkdir("$path/module/$name");
        mkdir("$path/module/$name/config");
        mkdir("$path/module/$name/src");
        mkdir("$path/module/$name/src/$name");
        mkdir("$path/module/$name/src/$name/Controller");
        mkdir("$path/module/$name/view");
        
        // Create the Module.php
        file_put_contents("$path/module/$name/Module.php", Skeleton::getModule($name));
        
        // Create the module.config.php
        file_put_contents("$path/module/$name/config/module.config.php", Skeleton::getModuleConfig($name));
        
        // Add the module in application.config.php
        $application = require "$path/config/application.config.php"; 
        if (!in_array($name, $application['modules'])) {
            $application['modules'][] = $name;
            copy ("$path/config/application.config.php", "$path/config/application.config.old");
            $content = <<<EOD
<?php
/**
 * Configuration file generated by ZFTool
 * The previous configuration file is stored in application.config.old
 *
 * @see https://github.com/zendframework/ZFTool
 */
 
EOD;
            
            $content .= 'return '. Skeleton::exportConfig($application) . ";\n";
            file_put_contents("$path/config/application.config.php", $content);
        }
        $console->writeLine("The module $name has been created in module folder.", Color::GREEN);
    }

    private function sendError($msg)
    {
        $m = new ConsoleModel();
        $m->setErrorLevel(2);
        $m->setResult($msg . PHP_EOL);
        return $m;
    }
}
